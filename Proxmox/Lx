#!/bin/bash
# tailscale-lxc-debug.sh
# Robust Proxmox helper: create minimal Debian 12 LXC, ensure /dev/net/tun, install Tailscale.
# Usage: sudo bash tailscale-lxc-debug.sh

set -o pipefail
LOG="/root/tailscale-lxc-$(date +%Y%m%d-%H%M%S).log"
exec > >(tee -a "$LOG") 2>&1

CTID=450
HOSTNAME="tailscale"
DISK_SIZE="2G"
RAM="256"
IP="192.168.0.33/24"
GW="192.168.0.1"
BRIDGE="vmbr0"

echo "== starting tailscale-lxc-debug.sh =="

echo "[1/12] Updating template list..."
if ! pveam update; then
  echo "[ERROR] pveam update failed. Check network / Proxmox config."
  exit 1
fi

echo "[2/12] Finding latest Debian 12 standard template..."
TEMPLATE=$(pveam available | awk '/^debian-12-standard/ {print $1}' | sort -V | tail -n1)
if [ -z "$TEMPLATE" ]; then
  echo "[ERROR] No debian-12-standard template found (pveam available)."
  echo "Run: pveam available | grep debian-12-standard"
  exit 1
fi
echo "[OK] Template: $TEMPLATE"

echo "[3/12] Download template if missing..."
if ! pveam download local "$TEMPLATE"; then
  echo "[ERROR] pveam download failed for $TEMPLATE"
  exit 1
fi

TEMPLATE_PATH="/var/lib/vz/template/cache/${TEMPLATE}"
if [ ! -f "$TEMPLATE_PATH" ]; then
  echo "[ERROR] Template file not found at $TEMPLATE_PATH after download."
  ls -l /var/lib/vz/template/cache/
  exit 1
fi
echo "[OK] Verified template file: $TEMPLATE_PATH"

echo "[4/12] Choosing a storage for rootfs..."
# prefer local-lvm if it exists, else first storage
if pvesm status | awk '{print $1}' | grep -qx "local-lvm"; then
  ROOT_STORAGE="local-lvm"
else
  ROOT_STORAGE=$(pvesm status | awk 'NR==1{print $1}')
fi
echo "[OK] Using storage: $ROOT_STORAGE"

echo "[5/12] Creating container (not started)..."
# create but do not start
if ! pct create $CTID local:vztmpl/$TEMPLATE \
  -hostname $HOSTNAME \
  -rootfs ${ROOT_STORAGE}:${DISK_SIZE} \
  -memory $RAM \
  -swap 0 \
  -net0 name=eth0,bridge=$BRIDGE,ip=$IP,gw=$GW \
  -unprivileged 1; then
  echo "[ERROR] pct create failed. Dumping last 100 lines of syslog for hints..."
  journalctl -n 200 --no-pager
  exit 1
fi

echo "[6/12] Enable nesting feature..."
if ! pct set $CTID -features nesting=1; then
  echo "[WARN] pct set -features nesting=1 failed (non-fatal). Continuing."
fi

CONF_FILE="/etc/pve/lxc/${CTID}.conf"
echo "[7/12] Ensuring tun config is present in $CONF_FILE ..."

# append lines if not already present (safe append)
if ! grep -q '^lxc.cgroup2.devices.allow: c 10:200 rwm' "$CONF_FILE" 2>/dev/null; then
  echo "lxc.cgroup2.devices.allow: c 10:200 rwm" >> "$CONF_FILE"
  echo "[OK] Added cgroup2.devices.allow line"
else
  echo "[OK] cgroup2.devices.allow already present"
fi

if ! grep -q '^lxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file' "$CONF_FILE" 2>/dev/null; then
  echo "lxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file" >> "$CONF_FILE"
  echo "[OK] Added mount.entry line"
else
  echo "[OK] mount.entry already present"
fi

echo "[8/12] Starting container..."
if ! pct start $CTID; then
  echo "[ERROR] pct start failed. Showing container config and exit."
  echo "----- /etc/pve/lxc/${CTID}.conf -----"
  sed -n '1,200p' "$CONF_FILE" || true
  exit 1
fi

echo "[9/12] Waiting 3s then checking /dev/net/tun inside container..."
sleep 3
if pct exec $CTID -- ls -l /dev/net/tun >/dev/null 2>&1; then
  echo "[OK] /dev/net/tun is present inside container (kernel mode available)."
else
  echo "[WARN] /dev/net/tun NOT present. Attempting safe restart (stop -> start) to apply config..."
  pct stop $CTID || true
  sleep 1
  # re-ensure lines present
  if ! grep -q '^lxc.cgroup2.devices.allow: c 10:200 rwm' "$CONF_FILE"; then
    echo "lxc.cgroup2.devices.allow: c 10:200 rwm" >> "$CONF_FILE"
  fi
  if ! grep -q '^lxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file' "$CONF_FILE"; then
    echo "lxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file" >> "$CONF_FILE"
  fi
  pct start $CTID || { echo "[ERROR] restart failed"; exit 1; }
  sleep 3
  if pct exec $CTID -- ls -l /dev/net/tun >/dev/null 2>&1; then
    echo "[OK] /dev/net/tun is present after restart."
  else
    echo "[ERROR] /dev/net/tun STILL missing inside container."
    echo "---- Container config (/etc/pve/lxc/${CTID}.conf): ----"
    sed -n '1,200p' "$CONF_FILE" || true
    echo "---- pveam/pvesm info ----"
    pveam available | grep debian-12-standard || true
    pvesm status || true
    echo "---- Please paste the above log or $LOG into the chat so I can inspect exact failure ----"
    exit 1
  fi
fi

echo "[10/12] Installing dependencies + Tailscale (only now)..."
pct exec $CTID -- bash -c "export DEBIAN_FRONTEND=noninteractive; apt-get update && apt-get install -y curl iptables iproute2 iptables-persistent || exit 1" || { echo "[ERROR] apt install inside container failed"; exit 1; }
pct exec $CTID -- bash -c "curl -fsSL https://tailscale.com/install.sh | sh" || { echo "[ERROR] tailscale install script failed"; exit 1; }
pct exec $CTID -- systemctl enable --now tailscaled || { echo "[WARN] could not start tailscaled - check container journald"; }

echo "[11/12] Enabling IP forwarding (inside container)..."
pct exec $CTID -- bash -c "sysctl -w net.ipv4.ip_forward=1; sysctl -w net.ipv6.conf.all.forwarding=1; echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf; echo 'net.ipv6.conf.all.forwarding=1' >> /etc/sysctl.conf" || true

echo "[12/12] Final checks..."
echo " - /dev/net/tun inside container:"
pct exec $CTID -- ls -l /dev/net/tun || true
echo " - tailscaled status (inside container):"
pct exec $CTID -- systemctl status tailscaled --no-pager || true

echo "== done. logfile: $LOG =="
echo
echo "Next steps (inside container):"
echo "  pct enter $CTID"
echo "  tailscale up --advertise-exit-node --advertise-routes=192.168.0.0/24 --accept-dns=false"
echo "Then approve routes and exit node in the Tailscale admin UI."

exit 0
